@model WalkingTec.Mvvm.Core.BaseVM
<style>
  a {
    color: #01aaed
  }
</style>
<wt:quote>
  <p>Since V2.4.0, the WTM framework supports Cookie and JWT
</wt:quote>

<wt:fieldset field-set-style="Simple" title="Description of CookieAuth and JwtAuth">
<p>
  <P>token: by default, the tokens generated by CookieAuth and JwtAuth contain only the ID and name attributes claim can be customized for later planning;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
     Issued tokens will not be invalidated immediately after system restart. The validity period of the token is saved in the token;
  </P>
  <br>

  <P>About token refresh :/api/_Account/RefreshToken interface is used for JwtAuth to refresh token manually. <br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    Authentication of middleware corresponding toCookieAuth will automatically detect the valid time of token and refresh the valid period of token automatically<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    (in the default implementation, the refresh time of token is half of the set time, i.e. it will refresh after 3600s)
  </P>
  <br>
  <P>User information: relevant data of user information are only stored in memory. After the user request arrives  back end, the user information is obtained according to the user ID in the token (user information storage can be customized and configured later) ;</P>

</p>
</wt:fieldset>

<wt:fieldset field-set-style="Simple" title="Set authentication method">
<p>
  Add [AuthorizeCookie],[AuthorizeJwt] or [AuthorizeJwtWithCookie] attributes on the Controller or method in the controller
</p>
<table lay-filter="parse-table-demo">
  <thead>
    <tr>
      <th lay-data="{field:'username', width:200}">Attribute</th>
      <th lay-data="{field:'joinTime', width:600}">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[AuthorizeJwtWithCookie]</td>
      <td>Supports both cookies and JWT</td>
    </tr>
    <tr>
      <td>[AuthorizeJwt]</td>
      <td>Jwt only</td>
    </tr>
    <tr>
      <td>[AuthorizeCookie]</td>
      <td>Cookie only，If no authentication method is specifie</td>
    </tr>
  </tbody>
</table>
</wt:fieldset>

<wt:fieldset field-set-style="Simple" title="File configuration ">
  <p>In appsetting, jwtoptions and cookieoptions are added to configure expiration time and other specific parameters</p>
</wt:fieldset>
<wt:code title="appsettings.json">
 {
  "JwtOptions": {
    "Issuer": "http://localhost",
    "Audience": "http://localhost",
    "Expires": 3600,
    "SecurityKey": "superSecretKey@345",
    "RefreshTokenExpires": 86400,
    "LoginPath": "/Login/Login"
  },
  "CookieOptions": {
    "Issuer": "http://localhost",
    "Audience": "http://localhost",
    "Expires": 3600,
    "SlidingExpiration": true,
    "SecurityKey": "superSecretKey@345",
    "RefreshTokenExpires": 86400,
    "LoginPath": "/Login/Login"
  },
}
</wt:code>

<wt:fieldset field-set-style="Simple" title="Testing JWT with swagger">
  <p>API in the framework support calls to JWT</p>
  <p>For the interface using cookie authentication, you can directly test and run it by logging in the system and opening the API document interface</p>
  <p>For the interface using JWT authentication, you need to manually enter ‘jwt token’ in the swagger page. The specific method is as follows:</p>

  <p>Call the login interface first, set the last parameter t to’false’ false, which means no cookie is used, the use jwt</p>
  <img src="~/imgs/jwt1.png" /><br /><br />

  <p>After the call is successful, you can see that the interface returns the jwt token</p>
  <img src="~/imgs/jwt2.png" /><br /><br />

  <p>Click the authorize button in the upper right corner, enter the Bearer space in the pop-up window, and then copy the token value returned by the above interface</p>
  <img src="~/imgs/jwt3.png" /><br /><br />

  <p>Then you can call the interface to test jwt</p>
</wt:fieldset>

  <script>
    layui.use('code', function () { layui.code({ about: false }) })
    layui.table.init('parse-table-demo', {
      limit: 100, page: false
    });
  </script>
<script>
  $("#@Model.ViewDivId").parent().css("height", "auto");
</script>
