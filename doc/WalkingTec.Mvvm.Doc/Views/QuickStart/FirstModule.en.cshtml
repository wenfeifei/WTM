@model WalkingTec.Mvvm.Core.BaseVM
<style>
  a {
    color: #01aaed
  }
</style>
<wt:fieldset field-set-style="Simple" title="first function module">
  <wt:quote>
    <p>Using WTM framework to write function modules is very simple. You only need to code the model layer, other common functions can be generated quickly through code generator.</p>
    <p>The following shows how to write a function module by an example of school information management system.</p>
    <p>*The following demonstration in a non-separation(LayUI mode between the front and back ends. If your project chooses separate(react) mode, the steps are basically the same.</p>
  </wt:quote>
  <ul class="doc">
    <li>
      First we create WTM framework project with a multi-layer structure. How to create a WTM project, please refer to<a href="/#/QuickStart/FirstProject"> the first project</a> section<br /><br />
      Structure of a new project should lool like this<br /><br />
      <img src="~/imgs/CodeGen1en.png" /><br /><br />
    </li>
    <li>
      In the project *.Model create a new model named ‘School’<br /><br />
      <wt:code title="School.cs">
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text;
using WalkingTec.Mvvm.Core;

namespace FirstProject.Model
{
  public enum SchoolTypeEnum {
    [Display(Name = "Public")]
    PUB,
    [Display(Name = "Private")]
    PRI
  }

  public class School : BasePoco
  {
    [Display( Name = "School Code")]
    [Required( ErrorMessage = "{0} is required")]
    [RegularExpression( "^[0-9]{3,3}$", ErrorMessage = "{0} must be three digits")]
    [StringLength(3)]
    public string SchoolCode { get; set; }

    [Display( Name = "School Name")]
    [StringLength( 50, ErrorMessage = "{0} has maximun {1} characters")]
    [Required(ErrorMessage = "{0} is required")]
    public string SchoolName { get; set; }

    [Display( Name = "School Type")]
    [Required(ErrorMessage = "{0} is required")]
    public SchoolTypeEnum? SchoolType { get; set; }

    [Display( Name = "Remark")]
    public string Remark { get; set; }
  }
}
      </wt:code>
    </li>
    <li>
      In the DataAccess project modify the DataContext file as shown bellow, so that in the database we can generate the table for ‘School’ model.<br /><br />
      <wt:code title="DataContext.cs">
using FirstProject.Model;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using WalkingTec.Mvvm.Core;

namespace FirstProject.DataAccess
{
  public class DataContext : FrameworkContext
  {
    public DbSet&lt;School&gt; Schools { get; set; }

    public DataContext(string cs, DBTypeEnum dbtype)
    : base(cs, dbtype)
    {
    }
  }
}
</wt:code>
    </li>
    <li>
     Press F5 to run. database table for ‘School’ model will be generated.<br /><br />
      <wt:quote>
        <p>At the moment, EF does not support automatic database updates. When you modify the model layer, you should delete the original database and let EF regenerate a new one.</p>
        <p>For more ways on how to update the database, refer to<a href="/#/Data/Migration"> data migration</a></p>
      </wt:quote>
    </li>
    <li>
      Next, we will use the code generator provided by the framework to generate basic code.After running the program, click the code generator in the upper right corner.<br /><br />
      <img src="~/imgs/CodeGen2en.png" /><br /><br />
    </li>
    <li>
      In the code generator, select the model to generate, fill in the name and area of the function module, and then click ‘generate’<br /><br />
      <img src="~/imgs/CodeGen3en.png" /><br /><br />
    </li>
    <li>
      Next, we will provide some simple configuration, such as which fields are form fields, which fields should be displayed in a list, Which fields should be searchable and so on.<br /><br />
      Here we treat all fields as form fields. list fields and import fields, make ‘school code’ ‘school name’ and ‘school type’ as searchable, and make ‘school type’ as updatable field.<br /><br />
      <img src="~/imgs/CodeGen4en.png" /><br /><br />
    </li>
    <li>
      Click ‘OK’ to generate the code.We will see a summary page which will show us which files were generated.<br /><br />
      <img src="~/imgs/CodeGen5en.png" /><br /><br />
      You can also preview the code that will be generated by clicking the preview button.<br /><br />
      <img src="~/imgs/CodeGen6en.png" /><br /><br />
    </li>
    <li>
      To generate code click Start generation button.<br /><br />
      After the code is generated, generated code will be available in the solution.<br /><br />
      <img src="~/imgs/CodeGen7en.png" /><br /><br />
      <wt:quote>
        <p>Please note that: the code generator will overwrite the original files with the same name. Remember to make a backup in advance.</p>
      </wt:quote>
    </li>
    <li>
      Recompile project and run it again, you will find that the module of ‘school management’ Exists in the left menu and functions such as adding, deleting, modifying, querying, importing and exporting, batch modifying, and batch deleting are available.<br /><br />
      <img src="~/imgs/CodeGen8en.png" /><br /><br />
    </li>
  </ul>

  <wt:quote>
    <p>Surprised? Happy? WTM framework is this simple.</p>
    <p>In this example we went through a simple single table operation. Wtm also supports one to many and many to-many relationship.</p>
    <p>**For many- to- many relationship, you need to add [middletable] table manually , so that the code generator can correctly identify them.</p>
    <p>Most of the logic is in the ViewModel layer. You can take a closer look at the generated code in ViewModel and refer to other chapters of this document to understand the principle of the framework.</p>
  </wt:quote>

</wt:fieldset>
<script>
  layui.use('code', function () { layui.code({ about: false }) })
</script>
<script>
  $("#@Model.ViewDivId").parent().css("height", "auto");
</script>
